input {
	http_poller {
		urls => {
			mispevents => {
				method => post
				url => "https://misp.local/attributes/restsearch" #Misp server url
				headers => {
					Authorization => "yourMISP-ApiKey" #Misp rest api key
					"Content-Type" => "application/json"
					Accept => "application/json"
				}
				body => '{"returnFormat":"csv","type":{"OR": ["ip-dst","ip-dst|port", "ip-src", "ip-src|port"]} }'
			}
		}
        cacert => "/usr/share/logstash/config/misp.local.crt" # Misp ssl certificate 
		schedule => {every => "30m"}
		codec => "line"
		keepalive => false
		request_timeout => 180
		socket_timeout => 180
	}
}

filter {

	if [message] == "" {
		drop{}
	}

	csv{

		skip_header => "true"
		columns => ["uuid", "event_id","category", "type", "value", "comment", "to_ids", "date", "object_relation", "attribute_tag", "object_uuid", "object_name", "object_meta_category"]
		add_field => {"priority" => "6" "lookupType" => "feed"}
		remove_field => ["to_ids", "object_relation", "object_uuid", "object_name", "object_meta_category"]

	}

	if ( [comment] == "") {
		mutate { replace => {"comment" => " "}}
	}

	mutate { 
		add_field => {"misp_date" => "%{date}"} 
	}

	# ip-dst or ip-src - Attribute Types
	# Define document id as the ipaddress without the "." - to prevent duplicate entries in els index
	if ( ([type] == "ip-dst") or ([type] == "ip-src") ) {

		if [Address] {
			mutate {
				copy => {"value" => "[source] [address]"}
				copy => {"[source] [address]" => "[source] [ip]"}
				copy => {"[source] [ip]" => "[destination] [address]"}
				copy => {"[destination] [address]" => "[destination] [ip]"}
			}
		}

		mutate {

			add_field => {
				"[@metadata][misp_key]" => "%{value}" "[@metadata][misp_value]" => "%{category}~%{comment}~%{priority}~%{type}~%{event_id}~%{misp_date}" "[@metadata][documentid]" => "%{value}"
			}
		}

	}


	# ip-dst|port or ip-src|port - Attribute Types
	# Define document id as the ipaddress and the port - to prevent duplicate entries in els index

	if ( ([type] == "ip-dst|port") or ([type] == "ip-src|port") ) {
		
		grok {

			match => {
				"value" => "(?<Address>\d+\.\d+\.\d+\.\d+)|( ?<Port>\d+ )"
			}
		}

		if [Address] {
			mutate {
				copy => {"Address" => "[source] [address]"}
				copy => {"[source] [address]" => "[source] [ip]"}
				copy => {"[source] [ip]" => "[destination] [address]"}
				copy => {"[destination] [address]" => "[destination] [ip]"}
			}
		}

		if [Port] {
			mutate {
				copy => {"Port" => "[source] [port]"}
				copy => {"[source] [port]" => "[destination] [port]"}
			}
		}

		mutate {

			add_field => {
				"[@metadata][misp_key]" => "%{Address}:%{Port}" "[@metadata][misp_value]" => "%{category}~%{comment}~%{priority}~%{type}~%{event_id}~%{misp_date}" "[@metadata][documentid]" => "%{Address}%{Port}"
			}
		}

	}

	if [@metadata][misp_key]{
		mutate {
			strip => ["[@metadata][misp_key]"]
		}

		#lookup for the key in csv file to see if it already exists using ruby script
		ruby{
			path => "/usr/share/logstash/config/mispKeyLookup.rb"
		}
	}

	# if [MispKeyAction] != "add"{
	# 	drop {}
	# }

	if [@metadata][documentid] {
		mutate {
			gsub => [ "[@metadata][documentid]", "\.", "-" ]
		}
	}

	mutate {
		remove_field => ["message", "MispKeyAction", "date", "Address", "Port"]
	}
	
}



output {

	csv {
		path => "/usr/share/logstash/config/misp.csv"
		csv_options => {"col_sep" => ","}
		fields => [ "[@metadata][misp_key]", "[@metadata][misp_value]" ]
		flush_interval => 0
	}



    # elasticsearch {
	# 	hosts => ["https://localhost:9200"]
	# 	index => "misp-feed"
	# 	user => your user
	# 	password => a pass
	# 	ssl => true
	# 	cacert => './elasticsearch-ca.pem'
	# 	http_compression => true
	# 	sniffing => false
	# }

    
  	stdout { codec => rubydebug }
	
}
